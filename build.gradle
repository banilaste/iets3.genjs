// MPS plugin
buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.4.+'
    }
}

// Git
plugins {
    id 'base'
	id 'org.ajoberstar.grgit' version '4.1.0' apply false
}

configurations {
    mps
    junitAnt
}

ext.mpsVersion = '2020.2'

dependencies {
    mps "com.jetbrains:mps:$mpsVersion"
    junitAnt 'org.apache.ant:ant-junit:1.10.9'
}

repositories {
    mavenLocal()
	maven {
		url 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
	}
    mavenCentral()
}

import org.ajoberstar.grgit.Grgit

// Make BuildLanguages and GenerateLibrariesXml available
import de.itemis.mps.gradle.*

def jdkHome = System.getProperty('java.home')

// Location of the dependencies
def iets3home = "$rootDir/dependencies/iets3.opensource"
def ecmascriptHome = "$rootDir/dependencies/ecmascript4mps"

// Default arguments for ant scripts
def buildScriptClasspath = project.configurations.junitAnt.fileCollection { true } +
	project.files("$jdkHome/lib/tools.jar")

// Download MPS (TODO provide a way to specify external MPS)
task resolveMps(type: Copy) {
    dependsOn configurations.mps
    from {
        configurations.mps.resolve().collect { zipTree(it) }
    }
    into "$buildDir/mps"
}

def version = "1.0"

def defaultScriptArgs = [
	'mps_home'                          : resolveMps.destinationDir,
	'iets3.github.opensource.home'      : iets3home,
	'ecmascript4mps.home'				: ecmascriptHome,
	'iets3.github.opensource.genjs.home': rootDir,
	'build.dir'                         : buildDir,
	'version'                           : version
]

// Declare them as global variable for the MPS plugin (see https://github.com/mbeddr/mps-gradle-plugin)
ext["itemis.mps.gradle.ant.defaultScriptArgs"] = defaultScriptArgs.collect { "-D$it.key=$it.value".toString() }
ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = buildScriptClasspath
ext["itemis.mps.gradle.ant.defaultJavaExecutable"] = file("$jdkHome/bin/java")

task cloneOpenSource {
	description "clone kernelF repository"
	doLast {
		try {
			Grgit.open(dir: iets3home)
			println "iets3.opensource exists, assuming clone to be done"
		} catch (Exception e) {
			def grgit = Grgit.clone(dir: iets3home, uri: "https://github.com/IETS3/iets3.opensource.git")
			println grgit.describe()
		}
	}
}

task buildOpenSource(type: GradleBuild, dependsOn: [cloneOpenSource, resolveMps]) {
	description "build kernelF from source"
	dir = file(iets3home)
    tasks = ['buildLanguages']
}

task cloneEcmascript {
	doLast {
		try {
			Grgit.open(dir: ecmascriptHome)
			println "iets3.opensource exists, assuming clone to be done"
		} catch(Exception e) {
			def grgit = Grgit.clone(
				dir: ecmascriptHome,
				uri: "https://github.com/mar9000/ecmascript4mps.git",
				refToCheckout: "development",
				checkout: true,
			)
			println grgit.describe()
		}
	}
}

task buildEcmascript(type: BuildLanguages, dependsOn: [cloneEcmascript, resolveMps]) {
	script "$ecmascriptHome/build.xml"
}

task buildLanguage(type: BuildLanguages, dependsOn: [buildEcmascript, buildOpenSource, resolveMps]) {
	script "$rootDir/build.xml"
}

task generateLibrariesXml(type: GenerateLibrariesXml) {
    description "Will read project libraries from projectlibraries.properties and generate libraries.xml in .mps directory. Libraries are loaded in mps during start."
    defaults rootProject.file('projectlibraries.properties')
	overrides rootProject.file('projectlibraries.overrides.properties')
    destination file('.mps/libraries.xml')
}

defaultTasks 'buildLanguage'